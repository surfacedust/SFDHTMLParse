/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "url_types.h"

namespace radar {

int _kStatusValues[] = {
  Status::UNLOAD,
  Status::TODO,
  Status::DOING,
  Status::OK,
  Status::BAD_REQUEST,
  Status::UNAUTHORIZED,
  Status::PAYMENT_REQUIRED,
  Status::FORBIDDEN,
  Status::NOT_FOUND,
  Status::METHOD_NOT_ALLOWED,
  Status::NOT_ACCEPTABLE,
  Status::PROXY_AUTHENTICATION_REQUIRED,
  Status::REQUEST_TIMEOUT,
  Status::CONFLIICT,
  Status::GONE,
  Status::LENGTH_REQUIRED,
  Status::PRECONDITION_FAILED,
  Status::REQUEST_ENTITY_TOO_LARGE,
  Status::REQUEST_URI_TOO_LONG,
  Status::UNSUPPORTED_MEDIA_TYPE,
  Status::REQUESTED_RANGE_NOT_SATISFIABLE,
  Status::EXPECTATION_FAILED,
  Status::INTERNAL_SERVER_ERROR,
  Status::NOT_IMPLEMENTED,
  Status::BAD_GATEWAY,
  Status::SERVICE_UNAVAILABLE,
  Status::GATEWAY_TIMEOUT,
  Status::HTTP_VERSION_NOT_SUPPORTED
};
const char* _kStatusNames[] = {
  "UNLOAD",
  "TODO",
  "DOING",
  "OK",
  "BAD_REQUEST",
  "UNAUTHORIZED",
  "PAYMENT_REQUIRED",
  "FORBIDDEN",
  "NOT_FOUND",
  "METHOD_NOT_ALLOWED",
  "NOT_ACCEPTABLE",
  "PROXY_AUTHENTICATION_REQUIRED",
  "REQUEST_TIMEOUT",
  "CONFLIICT",
  "GONE",
  "LENGTH_REQUIRED",
  "PRECONDITION_FAILED",
  "REQUEST_ENTITY_TOO_LARGE",
  "REQUEST_URI_TOO_LONG",
  "UNSUPPORTED_MEDIA_TYPE",
  "REQUESTED_RANGE_NOT_SATISFIABLE",
  "EXPECTATION_FAILED",
  "INTERNAL_SERVER_ERROR",
  "NOT_IMPLEMENTED",
  "BAD_GATEWAY",
  "SERVICE_UNAVAILABLE",
  "GATEWAY_TIMEOUT",
  "HTTP_VERSION_NOT_SUPPORTED"
};
const std::map<int, const char*> _Status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(28, _kStatusValues, _kStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kExpandWayValues[] = {
  ExpandWay::BY_SEED_DIRECTORY,
  ExpandWay::BY_SEED_ROOT,
  ExpandWay::BY_SEED_DOMAIN,
  ExpandWay::BY_NOLIMIT
};
const char* _kExpandWayNames[] = {
  "BY_SEED_DIRECTORY",
  "BY_SEED_ROOT",
  "BY_SEED_DOMAIN",
  "BY_NOLIMIT"
};
const std::map<int, const char*> _ExpandWay_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kExpandWayValues, _kExpandWayNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Url::ascii_fingerprint = "595AB1B36D9E64A40A0D544FD479C851";
const uint8_t Url::binary_fingerprint[16] = {0x59,0x5A,0xB1,0xB3,0x6D,0x9E,0x64,0xA4,0x0A,0x0D,0x54,0x4F,0xD4,0x79,0xC8,0x51};

uint32_t Url::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_seed_id = false;
  bool isset_parent_id = false;
  bool isset_url = false;
  bool isset_weight = false;
  bool isset_depth = false;
  bool isset_expend_way = false;
  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seed_id);
          isset_seed_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parent_id);
          isset_parent_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->weight);
          isset_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->depth);
          isset_depth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->expend_way = (ExpandWay::type)ecast0;
          isset_expend_way = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->status = (Status::type)ecast1;
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_seed_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parent_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_weight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_depth)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expend_way)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Url::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Url");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("seed_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->seed_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("parent_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->parent_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->weight);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("depth", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->depth);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("expend_way", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->expend_way);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* FailedUrl::ascii_fingerprint = "C119CA949C6BAA7DFD53C57F53D6311C";
const uint8_t FailedUrl::binary_fingerprint[16] = {0xC1,0x19,0xCA,0x94,0x9C,0x6B,0xAA,0x7D,0xFD,0x53,0xC5,0x7F,0x53,0xD6,0x31,0x1C};

uint32_t FailedUrl::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_url = false;
  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->status = (Status::type)ecast2;
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FailedUrl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FailedUrl");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SuccessUrl::ascii_fingerprint = "6B0CD68886A371B59CE1B9EDCF067801";
const uint8_t SuccessUrl::binary_fingerprint[16] = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

uint32_t SuccessUrl::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_seed_id = false;
  bool isset_id = false;
  bool isset_url = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seed_id);
          isset_seed_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_seed_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SuccessUrl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SuccessUrl");
  xfer += oprot->writeFieldBegin("seed_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->seed_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NewUrl::ascii_fingerprint = "8C845A3AAF3585B0F962B641E472EE17";
const uint8_t NewUrl::binary_fingerprint[16] = {0x8C,0x84,0x5A,0x3A,0xAF,0x35,0x85,0xB0,0xF9,0x62,0xB6,0x41,0xE4,0x72,0xEE,0x17};

uint32_t NewUrl::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_url = false;
  bool isset_weight = false;
  bool isset_depth = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->weight);
          isset_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->depth);
          isset_depth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_weight)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_depth)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NewUrl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NewUrl");
  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->weight);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("depth", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->depth);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ParserUrl::ascii_fingerprint = "7805498CEE328F6C5C70B7A66234FE3A";
const uint8_t ParserUrl::binary_fingerprint[16] = {0x78,0x05,0x49,0x8C,0xEE,0x32,0x8F,0x6C,0x5C,0x70,0xB7,0xA6,0x62,0x34,0xFE,0x3A};

uint32_t ParserUrl::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_succ_url = false;
  bool isset_new_urls = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->succ_url.read(iprot);
          isset_succ_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->new_urls.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            iprot->readListBegin(_etype6, _size3);
            this->new_urls.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->new_urls[_i7].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_new_urls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_succ_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_new_urls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ParserUrl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ParserUrl");
  xfer += oprot->writeFieldBegin("succ_url", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->succ_url.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("new_urls", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_urls.size()));
    std::vector<NewUrl> ::const_iterator _iter8;
    for (_iter8 = this->new_urls.begin(); _iter8 != this->new_urls.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
